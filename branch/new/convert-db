#!/usr/bin/python
# -*- python -*-

"""
NAME
	%(program)s - <short description>

SYNOPSIS
	%(program)s [OPTIONS] 

DESCRIPTION
        <long description>

%(options)s

FILES
        The program expects to read two files as input, one giving all information
        about a draft in the format '<draftname> <attr1>="value1"  <attr2>="value2" ...'
        or '<date> <draftname> <attr1>="value1"  <attr2>="value2" ...', the other
        being an aliases file which contain WG chair aliases.  If a file
        argument is given on the command line, it is assumed to be the all-IDs
        state file.  A chair-aliases file must be specified with the
        --chair-aliases option; if none is given, chair aliases will not be generated.

AUTHOR
	Written by Henrik Levkowetz, <henrik@levkowetz.com>

COPYRIGHT
	Copyright 2009 Henrik Levkowetz

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or (at
	your option) any later version. There is NO WARRANTY; not even the
	implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	PURPOSE. See the GNU General Public License for more details.

"""

import sys, os.path, getopt, re

version = "v0.10"
program = os.path.basename(sys.argv[0])
progdir = os.path.dirname(sys.argv[0])

options = ""
for line in re.findall("\n +(if|elif) +opt in \[(.+)\]:\s+#(.+)\n", open(sys.argv[0]).read()):
    if not options:
        options += "OPTIONS\n"
    options += "        %-16s %s\n" % (line[1].replace('"', ''), line[2])
options = options.strip()

# with ' < 1:' on the next line, this is a no-op:
if len(sys.argv) < 1:
    print __doc__ % locals()
    sys.exit(1)

try:
    opts, files = getopt.gnu_getopt(sys.argv[1:], "hvc", ["help", "version",])
except Exception, e:
    print "%s: %s" % (program, e)
    sys.exit(1)

# ----------------------------------------------------------------------

sys.path = [ progdir ] + sys.path
os.environ["DJANGO_SETTINGS_MODULE"] = "ietf.settings"

from datetime import datetime as Datetime

from django.conf import settings

from ietf.idtracker.models import InternetDraft as OldInternetDraft
from ietf.idtracker.models import IDInternal as OldIdInternal
from ietf.idtracker.models import RfcObsolete as OldRfcObsolete

from redesign.doc.models import *
from redesign.name.models import *
from redesign.person.models import *

import attrib

def changes(old, new):
    if not type(old) == type({}):
        old = old.__dict__.copy()
    if not type(new) == type({}):
        new = new.__dict__.copy()
    changed = []
    for key in old:
        if not key.startswith("_"):
            if key in new and old[key] != new[key]:
                changed += [key]
    return changed
        
def get_or_create(Cls, unique, **kwargs):
    try:
        unique = dict( [ (key, kwargs[key]) for key in unique ] )
        obj = Cls.objects.get(**unique)
    except Cls.DoesNotExist:
        try:
            obj, created = Cls.objects.get_or_create(**kwargs)
            if created:
                try:
                    print "Created %s:" % obj._meta.object_name, obj.id, obj.encode("Latin-1")
                except AttributeError:
                    print repr(obj)[:80]
            else:
                changes = changed(obj, kwargs)
                if changed:
                    print "Changed fields:"
                    for key in changes:
                        print "    %s: %s -> " % (key, getattr(obj, key), kwargs[key])
        except Exception, e:
            print Cls.__name__, kwargs
            print e
            raise
    except AssertionError:
        objects = Cls.objects.filter(**unique)
        for obj in list(objects)[1:]:
            print "Deleting duplicate object:", obj
            obj.delete()
        obj = Cls.objects.get(**unique)
    return obj
    
def get(Cls, **kwargs):
    try:
        obj = Cls.objects.get(**kwargs)
    except Cls.DoesNotExist:
        print "Can't find %s: %s" % (Cls.__name__, kwargs)
        raise
    return obj
    
def get_email(p):
    person = get_or_create(Person, ["id", ],
        id     = p.person_or_org_tag,
        time   = p.date_modified or Datetime.now(),
        prefix = p.name_prefix or "",
        given  = p.first_name,
        middle = p.middle_initial or "",
        family = p.last_name,
        suffix = p.name_suffix or "",
        address = "")
    email = get_or_create(Email, ["address"],
        time = Datetime.now(),
        address = p.email()[1],
        person = person)
    return email

def fix_alias(orig, aliases):
    if orig in aliases.keys():
        return aliases[orig]
    else:
        return orig

std_status_aliases = {
    "Best Current Practice": "BCP",
    "Request For Comments":  "Unknown",
    "Request":  "Unknown",
}


count = 0
for id in OldInternetDraft.objects.all():
    #print id.filename
    count += 1
    if count % 100:
        sys.stderr.write(".")
    doc = get_or_create(Document, ["name"], name=id.filename)
    alias = get_or_create(Alias, ["name"], document=doc, name=doc.name)
    try:
        id.iesg = OldIdInternal.objects.get(draft=id)
    except:
        id.iesg = None
    
    # Document related
    doc.type = get_or_create(DocTypeName, ["slug"], name="Draft",slug='draft', desc="")
    doc.title = id.title
    # State
    if id.iesg and id.iesg.via_rfc_editor:
        doc.stream = get_or_create(DocStreamName, ["slug"], name="Independent Submission", slug="indie", desc="")
    else:
        if id.filename[5:11] == "-iab-":
            doc.stream = get_or_create(DocStreamName, ["slug"], name="IAB", slug="iab", desc="")
        elif id.filename[5:12] == "-irtf-":
            doc.stream = get_or_create(DocStreamName, ["slug"], name="IRTF", slug="irtf", desc="")
        else:
            doc.stream = get_or_create(DocStreamName, ["slug"], name="IETF", slug="ietf", desc="")
    doc.state = get(DocStateName, name=id.status.status)
    doc.wg_state  = None
    if id.iesg:
        doc.iesg_state = get(IesgDocStateName, name=id.iesg.cur_state.state)
    doc.iana_state = None
    #doc.rfc_state =
    # Other
    doc.abstract = id.abstract
    doc.rev = id.revision
    doc.pages = id.txt_page_count
    try:
        doc.intended_std_level = get(StdStatusName, name=fix_alias(id.intended_status.intended_status, std_status_aliases))
    except:
        raise
    authors = {}
    email = None
    failure = False
    for info in id.authors.all():
        try:
            authors[info.person_id] = "Unknown"
            person = info.person
            email = get_email(info.person)
            authors[info.person_id] = "%-32s %s" % (email, str(person))
            #print " ", email
            doc.authors.add(email)
        except:
            try:
                person = Person.objects.get(id=info.person_id)
                email = person.email
            except:
                failure = True
        if email:
            doc.authors.add(email)
        if failure:
            print ""
            print id.filename
            for n, who in authors.items():
                print "  Author:", n, who
    #doc.updates.add()
    if id.replaces:
        doc.replaces.add(get_or_create(Document, ["name"], name=id.replaces.filename))
    #doc.obsoletes.add()
    if id.iesg:
        try:
            doc.ad = get_email(id.iesg.job_owner.person)
        except Exception:
            print "Looking at id: %s" % id
            print "Looking for job_owner: %s" % id.iesg.job_owner_id
            print "Looking for person: %s" % id.iesg.job_owner.person_id
            raise
    doc.shepherd = None
    doc.save()
    
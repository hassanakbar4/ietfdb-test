# Copyright The IETF Trust 2020, All Rights Reserved
# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-03-19 13:06
from __future__ import unicode_literals

import re

import debug

from django.db import migrations


name_map = {
    "Issue.*":                "tracker",
    ".*FAQ.*":                "faq",
    ".*Area Web Page":        "webpage",
    ".*Wiki":                 "wiki",
    "Home Page":              "webpage",
    "Slack.*":                "slack",
    "Additional .* Web Page": "webpage",
    "Additional .* Page":     "webpage",
    "Yang catalog entry.*":   "yc_entry",
    "Yang impact analysis.*": "yc_impact",
    "GitHub":                 "github_repo",
    "Github page":            "github_repo",
    "GitHub repo.*":          "github_repo",
    "Github repository.*":    "github_repo",
    "GitHub notifications":   "github_notify",
    "GitHub org.*":           "github_org",
    "GitHub User.*":          "github_username",
    "GitLab User":            "gitlab_username",
    "GitLab User Name":       "gitlab_username",
}

def forward(apps, schema_editor):
    GroupExtResource = apps.get_model('group', 'GroupExtResource')
    ExtResource = apps.get_model('extresource', 'ExtResource')
    ExtResourceName = apps.get_model('name', 'ExtResourceName')
    GroupUrl = apps.get_model('group', 'GroupUrl')

    mapped = 0
    not_mapped = 0
    for group_url in GroupUrl.objects.all():
        match_found = False
        for regext,slug in name_map.items():
            if re.match(regext, group_url.name):
                match_found = True
                mapped += 1
                name = ExtResourceName.objects.get(slug=slug)
                # This should probably be a get_or_create if there's any value to having a single ExtResource class
                ext_res = ExtResource.objects.create(name_id=slug, value= group_url.url) # TODO: validate this value against name.type
                GroupExtResource.objects.create(group=group_url.group, extresource=ext_res)
                break
        if not match_found:
            debug.show('("Not Mapped:",group_url.group.acronym, group_url.name, group_url.url)')
            not_mapped += 1
    debug.show('(mapped, not_mapped)')

def reverse(apps, schema_editor):
    GroupExtResource = apps.get_model('group', 'GroupExtResource')
    GroupExtResource.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('group', '0024_extres'),
        ('extresource', '0001_extres'),
        ('name', '0011_populate_extres'),
        ('doc', '0033_populate_docextresources'),
    ]

    operations = [
        migrations.RunPython(forward, reverse)
    ]
